package compiler.visitors;

import org.antlr.v4.runtime.ParserRuleContext;

import cc1.ay222cg.examples.MiniJavaBaseVisitor;
import cc1.ay222cg.examples.MiniJavaParser;
import cc1.ay222cg.examples.MiniJavaParser.DefineVarStContext;
import cc1.ay222cg.examples.MiniJavaParser.MethodContext;
import cc1.ay222cg.examples.MiniJavaParser.MethodParameterContext;
import cc1.ay222cg.examples.MiniJavaParser.MethodSignitureContext;
import cc1.ay222cg.examples.MiniJavaParser.StatementContext;
import compiler.symbolTbl.ClassRecord;
import compiler.symbolTbl.MethodRecord;
import compiler.symbolTbl.ParameterRecord;
import compiler.symbolTbl.SymbolTable;
import compiler.symbolTbl.VariableRecord;


public class SymTblVisitor<object> extends MiniJavaBaseVisitor<object> 
{
	private SymbolTable symbolTable = null;
	
	public SymTblVisitor()
	{
		this.symbolTable = new SymbolTable();
	}
	
	public SymbolTable getSymbolTable()
	{
		return symbolTable;
	}
	
	@Override 
	public object visitMainClass(MiniJavaParser.MainClassContext ctx) 
	{ 
		String mainClassName = ctx.mainClassName().getText();;
		symbolTable.put(mainClassName, new ClassRecord(mainClassName));
		
		symbolTable.enterScope(mainClassName);
			symbolTable.put("this", new VariableRecord("this", mainClassName));
			visit(ctx.mainMethod());
		symbolTable.exitScope();
		
		return null;
	}
	
	@Override 
	public object visitMainMethod(MiniJavaParser.MainMethodContext ctx) 
	{ 
		visit(ctx.mainMethodSigniture());
		String mainMethodName = ctx.mainMethodSigniture().mainMethodName().getText();
		
		symbolTable.enterScope(mainMethodName);
			visit(ctx.methodBody());
		symbolTable.exitScope();
		
		return null; 
	}
	
	@Override 
	public object visitMainMethodSigniture(MiniJavaParser.MainMethodSignitureContext ctx) 
	{ 
		String methodType = ctx.mainMethodName().getText();
		String methodName = ctx.mainMethodName().getText();
		
		symbolTable.put(methodName, new MethodRecord(methodName, methodType));
		return null;
	}
	
	@Override 
	public object visitClazz(MiniJavaParser.ClazzContext ctx) 
	{ 
		String clazzName = ctx.clazzName().getText();
		symbolTable.put(clazzName, new ClassRecord(clazzName));
		
		symbolTable.enterScope(clazzName);
			symbolTable.put("this", new VariableRecord("this", clazzName));
			
			for (DefineVarStContext defineVarCtx : ctx.defineVarSt())
			{
				String fieldType = defineVarCtx.type().getText();
				String fieldName = defineVarCtx.ID().getText();
				
				symbolTable.put(fieldName, new VariableRecord(fieldName, fieldType));
			}
			for (MethodContext methodCtx : ctx.method())
				visit(methodCtx);

		symbolTable.exitScope();
		
		return null; 
	}
	
	@Override 
	public object visitMethod(MiniJavaParser.MethodContext ctx) 
	{ 
		MethodSignitureContext methodSignitureCtx = ctx.methodSigniture();
		visit(methodSignitureCtx);
		String methodName = methodSignitureCtx.methodName().getText();
		MethodRecord mr = (MethodRecord) symbolTable.getCurrentScope().lookup(methodName);
		
		symbolTable.enterScope(methodName);
			for (ParameterRecord paramRecord : mr.getParameters())
				symbolTable.put(paramRecord.getName(), paramRecord);
			
			visit(ctx.methodBody());
		symbolTable.exitScope();
		
		return null;
	}
	
	@Override 
	public object visitMethodSigniture(MiniJavaParser.MethodSignitureContext ctx) 
	{ 
		String methodType = ctx.methodType().getText();
		String methodName = ctx.methodName().getText();
		MethodRecord mr = new MethodRecord(methodName, methodType);
		
		for (MethodParameterContext methodParameter : ctx.methodParameter())
		{
			String parameterName = methodParameter.ID().getText();
			String parameterType = methodParameter.type().getText();
			
			mr.AddParameter(parameterName, parameterType);
		}
		
		symbolTable.put(methodName, mr);
		
		return null; 
	}
	
	@Override 
	public object visitMethodBody(MiniJavaParser.MethodBodyContext ctx) 
	{ 
		for (StatementContext statementCtx : ctx.statement())
		{
			DefineVarStContext defineVarStCtx = statementCtx.defineVarSt();
			if (defineVarStCtx != null)
				visit(defineVarStCtx);
		}

		return null;
	}
	
	@Override 
	public object visitDefineVarSt(MiniJavaParser.DefineVarStContext ctx) 
	{ 
		String varType = ctx.type().getText();
		String varName;
		if (ctx.assignSt() != null)
			varName = ctx.assignSt().ID().getText();
		else
			varName = ctx.ID().getText();
		
		symbolTable.put(varName, new VariableRecord(varName, varType));
		
		return null;
	}
	
	
	private void print(ParserRuleContext ctx)
	{
		for (int i=0; i< ctx.children.size(); i++)
		{
			System.out.println(i + "- " + ctx.getChild(i).getText());
		}
	}

}
